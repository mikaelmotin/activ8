import { SvelteComponentTyped } from "svelte";
/**
 * This component was copied over from the old SDKs and has a lot of code pointing to invalid functions/env vars. It needs
 * to be cleaned up before the component can actually be usable.
 */
interface BuilderElement {
}
/**
 * This component was copied over from the old SDKs and has a lot of code pointing to invalid functions/env vars. It needs
 * to be cleaned up before the component can actually be usable.
 */
export interface FormProps {
    attributes?: any;
    name?: string;
    action?: string;
    validate?: boolean;
    method?: string;
    builderBlock?: BuilderElement;
    sendSubmissionsTo?: string;
    sendSubmissionsToEmail?: string;
    sendWithJs?: boolean;
    contentType?: string;
    customHeaders?: {
        [key: string]: string;
    };
    successUrl?: string;
    previewState?: FormState;
    successMessage?: BuilderElement[];
    errorMessage?: BuilderElement[];
    sendingMessage?: BuilderElement[];
    resetFormOnSubmit?: boolean;
    errorMessagePath?: string;
}
/**
 * This component was copied over from the old SDKs and has a lot of code pointing to invalid functions/env vars. It needs
 * to be cleaned up before the component can actually be usable.
 */
export type FormState = "unsubmitted" | "sending" | "success" | "error";
declare const __propDef: {
    props: {
        previewState: FormProps["previewState"];
        sendWithJs: FormProps["sendWithJs"];
        sendSubmissionsTo: FormProps["sendSubmissionsTo"];
        action: FormProps["action"];
        customHeaders: FormProps["customHeaders"];
        contentType: FormProps["contentType"];
        sendSubmissionsToEmail: FormProps["sendSubmissionsToEmail"];
        name: FormProps["name"];
        method: FormProps["method"];
        errorMessagePath: FormProps["errorMessagePath"];
        resetFormOnSubmit: FormProps["resetFormOnSubmit"];
        successUrl: FormProps["successUrl"];
        validate: FormProps["validate"];
        attributes: FormProps["attributes"];
        builderBlock: FormProps["builderBlock"];
        errorMessage: FormProps["errorMessage"];
        sendingMessage: FormProps["sendingMessage"];
        successMessage: FormProps["successMessage"];
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export type FormProps = typeof __propDef.props;
export type FormEvents = typeof __propDef.events;
export type FormSlots = typeof __propDef.slots;
export default class Form extends SvelteComponentTyped<FormProps, FormEvents, FormSlots> {
}
export {};
