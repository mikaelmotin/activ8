import { evaluate } from './evaluate.js';
import { fastClone } from './fast-clone.js';
import { set } from './set.js';
import { transformBlock } from './transform-block.js';
const evaluateBindings = ({ block, context, state, }) => {
    if (!block.bindings) {
        return block;
    }
    const copy = fastClone(block);
    const copied = {
        ...copy,
        properties: { ...copy.properties },
        actions: { ...copy.actions },
    };
    for (const binding in block.bindings) {
        const expression = block.bindings[binding];
        const value = evaluate({ code: expression, state, context });
        set(copied, binding, value);
    }
    return copied;
};
export function getProcessedBlock({ block, context, shouldEvaluateBindings, state, }) {
    const transformedBlock = transformBlock(block);
    if (shouldEvaluateBindings) {
        return evaluateBindings({ block: transformedBlock, state, context });
    }
    else {
        return transformedBlock;
    }
}
